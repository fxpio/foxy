<?xml version="1.0"?>
<ruleset name="Foxy">

    <file>Asset</file>
    <file>Config</file>
    <file>Converter</file>
    <file>Event</file>
    <file>Exception</file>
    <file>Fallback</file>
    <file>Json</file>
    <file>Resources</file>
    <file>Solver</file>
    <!-- 
        TODO: Maybe later?
        <file>Tests</file> 
    -->
    <file>Util</file>

    <!-- Allow TODO tags -->
    <rule ref="Generic.Commenting.Todo.CommentFound">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Commenting.Todo.TaskFound">
        <severity>0</severity>
    </rule>

    <!-- 
        Below is blatently stolen from hphpcs itself
        @link https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xml.dist
    -->

    <arg name="basepath" value="."/>
    <arg name="colors"/>
    <arg name="parallel" value="75"/>
    <arg value="np"/>

    <!-- Don't hide tokenizer exceptions -->
    <rule ref="Internal.Tokenizer.Exception">
        <type>error</type>
    </rule>

    <!-- Include the whole PEAR standard -->
    <rule ref="PEAR">
        <exclude name="PEAR.Commenting.FileComment.MissingLicenseTag"/>
        <exclude name="PEAR.NamingConventions.ValidFunctionName"/>
        <exclude name="PEAR.NamingConventions.ValidVariableName"/>
        <exclude name="PEAR.Commenting.ClassComment"/>
        <exclude name="PEAR.Commenting.FileComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingPackageTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingLinkTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingVersion"/>
        <exclude name="PEAR.Commenting.InlineComment"/>
        <exclude name="PEAR.ControlStructures.MultiLineCondition.CloseBracketNewLine"/>
    </rule>

    <!-- Include some sniffs from other standards that don't conflict with PEAR -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ElseIfDeclaration"/>
    <rule ref="Squiz.Commenting.BlockComment"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <rule ref="Squiz.Commenting.InlineComment"/>
    <!--
        TODO: Maybe enable this?
    <rule ref="Squiz.Commenting.LongConditionClosingComment"/>
    -->
    <rule ref="Squiz.Commenting.PostStatementComment"/>
    <rule ref="Squiz.Commenting.VariableComment">
        <!-- 
            TODO: Enable this
            Currently it's complaing about using bool instead of boolean.
            I this bool is correct, but it may be suppressing other incorrect var types
        -->
        <exclude name="Squiz.Commenting.VariableComment.IncorrectVarType"/>
    </rule>
    <rule ref="Squiz.Formatting.OperatorBracket"/>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <!-- TODO: Sayig should be 0, but should be 1 -->
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceBeforeEquals"/>
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceAfterEquals"/>
    </rule>
    <rule ref="Squiz.Operators.ComparisonOperatorUsage">
        <!-- TODO: don't exclude these -->
        <exclude name="Squiz.Operators.ComparisonOperatorUsage.ImplicitTrue"/>
        <exclude name="Squiz.Operators.ComparisonOperatorUsage.NotAllowed"/>
    </rule>
    <!--
        TODO: Enable this
    <rule ref="Squiz.PHP.DisallowInlineIf"/>
    -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <!-- This is dumb, IMO -->
        <exclude name="Squiz.Strings.ConcatenationSpacing.PaddingFound"/>
    </rule>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>
    <rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace">
        <!-- This is dumb, IMO -->
        <exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace.SpacingBeforeClose"/>
    </rule>

    <!--
        TODO: Enable this
    <rule ref="Squiz.WhiteSpace.FunctionSpacing"/>
    -->
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <!-- TODO: Newline should be allowed, IMO -->
        <exclude name="Squiz.WhiteSpace.MemberVarSpacing.FirstIncorrect"/>
    </rule>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <!-- TODO: Newline should be allowed, IMO -->
        <exclude name="Squiz.WhiteSpace.OperatorSpacing.SpacingBefore"/>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.Commenting.Todo"/>
    <!-- TODO: This should be done. -->
    <rule ref="Generic.Commenting.DocComment.MissingShort">
        <severity>0</severity>
    </rule>

    <!-- TODO: This should be done. -->
    <rule ref="Generic.ControlStructures.DisallowYodaConditions">
        <severity>0</severity>
    </rule>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="PSR12.Files.OpenTag"/>
    <rule ref="Zend.Files.ClosingTag"/>

    <!-- PEAR uses warnings for inline control structures, so switch back to errors -->
    <rule ref="Generic.ControlStructures.InlineControlStructure">
        <properties>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!-- We use custom indent rules for arrays -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine">
        <severity>0</severity>
    </rule>
    <!-- TODO: Allow this so your code lines up like the doc comments? -->
    <rule ref="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned">
        <severity>0</severity>
    </rule>
    <!-- TODO: Um, wrong. -->
    <rule ref="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed">
        <severity>0</severity>
    </rule>

    <!-- Check var names, but we don't want leading underscores for private vars -->
    <rule ref="Squiz.NamingConventions.ValidVariableName"/>
    <rule ref="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Only one argument per line in multi-line function calls -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="allowMultipleArguments" value="false"/>
        </properties>
    </rule>

    <!-- Ban some functions -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="sizeof" value="count"/>
                <element key="delete" value="unset"/>
                <element key="print" value="echo"/>
                <element key="is_null" value="null"/>
                <element key="create_function" value="null"/>
            </property>
        </properties>
    </rule>

    <!-- Private methods MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <type>error</type>
    </rule>

    <!-- Private properties MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
        <type>error</type>
    </rule>

    <!-- The testing bootstrap file uses string concats to stop IDEs seeing the class aliases -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <exclude-pattern>tests/bootstrap\.php</exclude-pattern>
    </rule>

    <!-- This test file specifically *needs* Windows line endings for testing purposes. -->
    <rule ref="Generic.Files.LineEndings.InvalidEOLChar">
        <exclude-pattern>tests/Core/Tokenizer/StableCommentWhitespaceWinTest\.php</exclude-pattern>
    </rule>
</ruleset>
